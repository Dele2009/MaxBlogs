<!DOCTYPE html>
<html lang="en">

<%-include('./components/main_app_head')%>

    <body>
        <%-include('./components/main_app_header')%>
            <style>
                .spinner {
                    width: 24px;
                    height: 24px;
                    border-radius: 50%;
                    background: radial-gradient(farthest-side, #ffffff 94%, #0000) top/6.4px 6.4px no-repeat,
                        conic-gradient(#0000 30%, #ffffff);
                    -webkit-mask: radial-gradient(farthest-side, #0000 calc(100% - 3.8px), #000 0);
                    animation: spinner-c7wet2 1s infinite linear;
                }

                @keyframes spinner-c7wet2 {
                    100% {
                        transform: rotate(1turn);
                    }
                }

                .mybtn {
                    display: grid;
                    place-items: center;
                }

                .alert-wd {
                    width: fit-content;
                }

                #Message {
                    font-size: 20px;
                    padding: 0px 30px;
                }
            </style>
            <svg xmlns="http://www.w3.org/2000/svg" class="d-none">
                <symbol id="check-circle-fill" viewBox="0 0 16 16">
                    <path
                        d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
                </symbol>
                <symbol id="exclamation-triangle-fill" viewBox="0 0 16 16">
                    <path
                        d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
                </symbol>
            </svg>
            
            <div class="position-sticky bd-mode-toggle alert d-flex align-items-center ms-auto alert-wd alert-dismissible fade show" role="alert" id="alert"
                style="visibility: hidden;top: 85px;">
                <svg class="bi flex-shrink-0 me-1" role="img" style="width: 30px;height:30px;">
                    <use id="infoIcon" xlink:href="#exclamation-triangle-fill" />
                </svg>
                <div>
                    <i id="Message"></i>
                </div>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>

            <main class="row justify-content-center align-items-center my-5">
                <div class="col-10 my-5">
                    <form id="BlogForm" enctype="multipart/form-data">

                        <h1 class="h3 mb-3 fw-normal text-center mb-5">Write A New Blog</h1>
                        <div class="form-floating my-3">

                            <div class="input-group mb-3">
                                <input type="text" class="form-control py-3" id="author" name="author" required
                                    value="<%=User.name%>" placeholder="Blog author" readonly>
                                <!-- <button class="btn btn-primary" type="button" id="button-addon2" >Edit Author</button> -->
                            </div>



                        </div>


                        <div class="input-group my-3">
                            <label class="input-group-text" for="category">Blog Catergory</label>
                            <select class="form-select py-3" id="category" name="category" required>
                                <option selected>Choose...</option>
                                <option value="World">World</option>
                                <option value="Technology">Technology</option>
                                <option value="Design">Design</option>
                                <option value="Culture">Culture</option>
                                <option value="Business">Business</option>
                                <option value="Politics">Politics</option>
                                <option value="Opinion">Opinion</option>
                                <option value="Science">Science</option>
                                <option value="Health">Health</option>
                                <option value="Style">Style</option>
                                <option value="Travel">Travel</option>
                            </select>
                        </div>

                        <div class="form-floating my-3">
                            <input type="text" class="form-control" id="title" name="title" required placeholder="">
                            <label for="title">Blog Title</label>
                        </div>

                        <div class="form-floating my-3">
                            <input type="file" class="form-control" id="heroimage" name="heroimage" required
                                placeholder="">
                            <label for="heroimage">Blog Hero-Image</label>
                        </div>
                        <div class="my-3">

                            <textarea id="my-blog" cols="30" rows="30" name="blog"></textarea>

                        </div>



                        <button class="btn btn-dark mt-5 py-2 mybtn" type="submit">
                            <span id="text">Publish blog</span>
                            <div class="spinner" id="loader" style="display: none;"></div>
                        </button>

                    </form>
                </div>
            </main>

            <script>
                let form = document.getElementById('BlogForm')
                form.addEventListener('submit', async (event) => {
                    event.preventDefault(); // Prevent form submission

                    // // Form data
                    const author = document.getElementById('author');
                    const category = document.getElementById('category');
                    const title = document.getElementById('title');
                    const heroimage = document.getElementById('heroimage');
                    const blog = document.getElementById('my-blog');
                    const blogcontent = tinymce.get('my-blog').getContent()

                    // const isValid = validateFormFields()
                    const submitBtnText = document.getElementById('text')
                    const loader = document.getElementById('loader')
                    const mainalert = document.getElementById('alert')
                    const useElement = document.getElementById('infoIcon');
                    const message = document.getElementById('Message');


                    // Make AJAX request
                    if (form.checkValidity()) {


                        const formData = new FormData();
                        formData.append('author', author.value);
                        formData.append('category', category.value);
                        formData.append('title', title.value);
                        formData.append('heroimage', heroimage.files[0]);
                        formData.append('blog', blogcontent);

                        console.log(blogcontent)

                        // Send form data to server using Fetch API
                        try {
                            const response = await fetch('/user/dashboard/create-blog', {
                                method: 'POST',
                                body: formData
                            })

                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            // return response.json(); // assuming server responds with text
                            const data = await response.json()

                            // Handle success response from server
                            console.log('Success:', data);


                            submitBtnText.style.display = 'none';
                            loader.style.display = 'block';
                            let count = 0
                            let k = setInterval(() => {
                                if (count === 5) {
                                    clearInterval(k)
                                    loader.style.display = 'none'
                                    submitBtnText.style.display = 'inline'
                                    mainalert.style.visibility = 'visible'
                                    message.textContent = data.message
                                    if (data.error === true) {
                                        mainalert.classList.add('alert-danger')
                                        useElement.setAttribute('xlink:href', '#exclamation-triangle-fill');
                                    } else {
                                        mainalert.classList.remove('alert-danger')
                                        mainalert.classList.add('alert-success')
                                        useElement.setAttribute('xlink:href', '#check-circle-fill');
                                    }

                                }
                                count++
                            }, 1000)


                            if (data.error === false) {

                                setTimeout(() => {
                                    window.location.href = data.redirectTo;
                                }, 8000);
                            }
                        } catch (error) {
                            console.log(error)
                        }



                    }
                });
            </script>
    </body>

</html>