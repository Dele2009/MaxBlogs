<!DOCTYPE html>
<html lang="en">

<%-include('./components/head')%>

    <body>
        <%-include('./components/header')%>

            <style>
                .spinner {
                    width: 24px;
                    height: 24px;
                    border-radius: 50%;
                    background: radial-gradient(farthest-side, #ffffff 94%, #0000) top/6.4px 6.4px no-repeat,
                        conic-gradient(#0000 30%, #ffffff);
                    -webkit-mask: radial-gradient(farthest-side, #0000 calc(100% - 3.8px), #000 0);
                    animation: spinner-c7wet2 1s infinite linear;
                }

                @keyframes spinner-c7wet2 {
                    100% {
                        transform: rotate(1turn);
                    }
                }

                .mybtn {
                    display: grid;
                    place-items: center;
                }

                .alert-wd{
                    width: fit-content;
                }
                #Message{
                    font-size: 20px;
                    padding: 0px 30px;
                }
            </style>

            <svg xmlns="http://www.w3.org/2000/svg" class="d-none">
                <symbol id="check-circle-fill" viewBox="0 0 16 16">
                    <path
                        d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
                </symbol>
                <symbol id="exclamation-triangle-fill" viewBox="0 0 16 16">
                    <path
                        d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
                </symbol>
            </svg>

            <div class="alert d-flex align-items-center ms-auto alert-wd" role="alert" id="alert"
                style="visibility: hidden;">
                <svg class="bi flex-shrink-0 me-1" role="img" style="width: 30px;height:30px;">
                    <use id="infoIcon" xlink:href="#exclamation-triangle-fill" />
                </svg>
                <div >
                   <i id="Message"></i>
                </div>
            </div>
            <main class="row justify-content-center align-items-center mt-5">

                <div class="col-10 col-lg-6">
                    <form id="LoginForm">

                        <h1 class="h3 mb-3 fw-normal text-center mb-5">Login To Your Account</h1>


                        <div class="form-floating my-3">
                            <input type="email" class="form-control" id="email" name="email" placeholder="">
                            <label for="email">Email Address *</label>
                        </div>



                        <div class="form-floating my-3">
                            <input type="password" class="form-control" id="password" name="password" placeholder="">
                            <label for="password">Password *</label>
                        </div>




                        <button class="btn btn-primary w-100 py-2 mybtn" type="submit">
                            <span id="text">Log-In</span>
                            <div class="spinner" id="loader" style="display: none;"></div>
                        </button>

                    </form>
                </div>
            </main>

            <script>
                let btnText = document.getElementById('text')
                let loader = document.getElementById('loader')
                const mainalert = document.getElementById('alert')
                const useElement = document.getElementById('infoIcon');
                const message = document.getElementById('Message');
                let form = document.getElementById('LoginForm')
                form.addEventListener('submit', async (event) => {
                    event.preventDefault(); // Prevent form submission

                    // Form data
                    const email = document.getElementById('email');
                    const password = document.getElementById('password');
                    console.log(email.value, password.value)

                    // const isValid = validateFormFields()


                    // Make AJAX request
                    // Send form data to server using Fetch API
                    try {
                        const response = await fetch('/user/log-in', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                email: email.value,
                                password: password.value
                            })
                        })

                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }

                        const data = await response.json();
                        console.log('Success:', data);

                        // Simulate a loader
                        btnText.style.display = 'none';
                        loader.style.display = 'block';
                        let count = 0
                        let k = setInterval(() => {
                            if (count === 5) {
                                clearInterval(k)
                                loader.style.display = 'none'
                                btnText.style.display = 'inline'
                                mainalert.style.visibility = 'visible'
                                message.textContent = data.message
                                if (data.error === true) {
                                    mainalert.classList.add('alert-danger')
                                    useElement.setAttribute('xlink:href', '#exclamation-triangle-fill');
                                } else {
                                    mainalert.classList.remove('alert-danger')
                                    mainalert.classList.add('alert-success')
                                    useElement.setAttribute('xlink:href', '#check-circle-fill');
                                }
                               
                            }
                            count++
                        }, 1000)

                        // Redirect after a delay
                        if (data.error === false) {
                            // Unauthorized: Invalid credentials
                            setTimeout(() => {
                                window.location.href = data.redirectTo;
                            }, 8000);
                        }
                    } catch (error) {
                        console.log(error)
                    }


                    // return response.json(); // assuming server responds with text




                })



            </script>
    </body>

</html>