<!DOCTYPE html>
<html lang="en">

<%-include('./components/head')%>

    <body>
        <%-include('./components/header')%>

            <style>
                .error {
                    border: 1px solid red !important;
                }
                .spinner {
                    width: 24px;
                    height: 24px;
                    border-radius: 50%;
                    background: radial-gradient(farthest-side, #ffffff 94%, #0000) top/6.4px 6.4px no-repeat,
                        conic-gradient(#0000 30%, #ffffff);
                    -webkit-mask: radial-gradient(farthest-side, #0000 calc(100% - 3.8px), #000 0);
                    animation: spinner-c7wet2 1s infinite linear;
                }

                @keyframes spinner-c7wet2 {
                    100% {
                        transform: rotate(1turn);
                    }
                }

                .mybtn {
                    display: grid;
                    place-items: center;
                }

                .alert-wd{
                    width: fit-content;
                }
                #Message{
                    font-size: 20px;
                    padding: 0px 30px;
                }
            </style>

<svg xmlns="http://www.w3.org/2000/svg" class="d-none">
    <symbol id="check-circle-fill" viewBox="0 0 16 16">
        <path
            d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
    </symbol>
    <symbol id="exclamation-triangle-fill" viewBox="0 0 16 16">
        <path
            d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
    </symbol>
</svg>

<div class="alert d-flex align-items-center ms-auto alert-wd" role="alert" id="alert"
    style="visibility: hidden;">
    <svg class="bi flex-shrink-0 me-1" role="img" style="width: 30px;height:30px;">
        <use id="infoIcon" xlink:href="#exclamation-triangle-fill" />
    </svg>
    <div >
       <i id="Message"></i>
    </div>
</div>
            <main class="row justify-content-center align-items-center mt-5">
                <div class="col-10 col-lg-6">
                    <form id="SignUpForm" enctype="multipart/form-data">

                        <h1 class="h3 mb-3 fw-normal text-center mb-5">Sign-Up to Become a writer</h1>

                        <div class="form-floating my-3">
                            <input type="text" class="form-control" id="name" name="name" placeholder="">
                            <label for="name">Name *</label>
                            <i id="nameError" class="error-message"></i>
                        </div>

                        <div class="form-floating my-3">
                            <input type="email" class="form-control" id="email" name="email" placeholder="">
                            <label for="email">Email Address *</label>
                            <i id="emailError" class="error-message"></i>
                        </div>

                        <div class="my-3">
                            <input type="file" class="form-control" id="avatar" name="avatar" placeholder="">
                            <label for="avatar">Upload Profile-Picture</label>
                            <i id="emailError" class="error-message"></i>
                        </div>

                        <div class="form-floating my-3">
                            <input type="password" class="form-control" id="password" name="password" placeholder="">
                            <label for="password">Password *</label>
                            <i id="passwordError" class="error-message"></i>
                        </div>




                        
                        <button class="btn btn-primary w-100 py-2 mybtn" type="submit">
                            <span id="text">Sign-Up</span>
                            <div class="spinner" id="loader" style="display: none;"></div>
                        </button>

                    </form>
                </div>
            </main>

            <script type="module">
                // import axios from 'https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js';

                // function validateForm() {
                //     // Validation patterns
                //     const namePattern = /^[a-zA-Z\s]+$/;
                //     const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                //     const passwordPattern = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/;

                //     const name = document.getElementById('name');
                //     const email = document.getElementById('email');
                //     const avatar = document.getElementById('avatar').files[0];
                //     const password = document.getElementById('password');
                //     // Reset previous error messages and borders
                //     const errorMessages = document.querySelectorAll('.error-message');
                //     errorMessages.forEach(element => {
                //         element.textContent = '';
                //     });

                //     const formFields = [name, email, password];
                //     formFields.forEach(field => {
                //         field.classList.remove('error');
                //     });

                //     // Perform validation


                //     if (!namePattern.test(name.value)) {
                //         document.getElementById('nameError').textContent = 'Please enter a valid name (letters and spaces only)';
                //         name.classList.add('error');
                //         return false;
                //     }


                //     if (!emailPattern.test(email.value)) {
                //         document.getElementById('emailError').textContent = 'Please enter a valid email address';
                //         email.classList.add('error');
                //         return false;
                //     }

                //     if (!avatar) {
                //         document.getElementById('avatarError').textContent = 'Please select an image file';
                //         avatar.classList.add('error');
                //         return false;
                //     }

                //     if (!passwordPattern.test(password.value)) {
                //         document.getElementById('passwordError').textContent = 'Password must be at least 8 characters long and contain at least one number, one lowercase letter, and one uppercase letter';
                //         password.classList.add('error');
                //         return false;
                //     }

                //     return true




                // }
                let form = document.getElementById('SignUpForm')
                form.addEventListener('submit', async (event) => {
                    event.preventDefault(); // Prevent form submission

                    // // Form data
                    const name = document.getElementById('name');
                    const email = document.getElementById('email');
                    const avatar = document.getElementById('avatar');
                    const password = document.getElementById('password');

                    // const isValid = validateFormFields()
                    const submitBtnText = document.getElementById('text')
                    const loader = document.getElementById('loader')
                    const mainalert = document.getElementById('alert')
                    const useElement = document.getElementById('infoIcon');
                    const message = document.getElementById('Message');


                    // Make AJAX request
                    if (form.checkValidity()) {


                        const formData = new FormData();
                        formData.append('name', name.value);
                        formData.append('password', password.value);
                        formData.append('email', email.value);
                        formData.append('avatar', avatar.files[0]);

                        // Send form data to server using Fetch API
                        try {
                            const response=await fetch('/user/sign-up', {
                                method: 'POST',
                                body: formData
                            })
                                
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                                    // return response.json(); // assuming server responds with text
                            const data = await response.json()
                                
                                    // Handle success response from server
                            console.log('Success:', data);


                            submitBtnText.style.display = 'none';
                            loader.style.display = 'block';
                            let count = 0
                            let k = setInterval(() => {
                                if (count === 5) {
                                    clearInterval(k)
                                    loader.style.display = 'none'
                                    submitBtnText.style.display = 'inline'
                                    mainalert.style.visibility = 'visible'
                                    message.textContent = data.message
                                    if (data.error === true) {
                                        mainalert.classList.add('alert-danger')
                                        useElement.setAttribute('xlink:href', '#exclamation-triangle-fill');
                                    } else {
                                        mainalert.classList.remove('alert-danger')
                                        mainalert.classList.add('alert-success')
                                        useElement.setAttribute('xlink:href', '#check-circle-fill');
                                    }
                                    
                                }
                                count++
                            }, 1000)


                            if (data.error === false) {
                                
                                setTimeout(() => {
                                    window.location.href = data.redirectTo;
                                }, 8000);
                            }
                        } catch (error) {
                            console.log(error)
                        }
                        
                           
                            
                    }
                });
                        
                           
                
            </script>
    </body>

</html>